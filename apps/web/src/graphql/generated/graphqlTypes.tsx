/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * pnpm generate-gql
 *
 * for this file to be re-created
 */
import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
export type Maybe<T> = T;
export type InputMaybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never;
    };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
};

export type CreateRaceInput = {
  date: Scalars["String"]["input"];
  location: Scalars["String"]["input"];
  name: Scalars["String"]["input"];
};

export type CreateResultInput = {
  participant: Scalars["String"]["input"];
  raceId: Scalars["Int"]["input"];
  time: Scalars["Int"]["input"];
};

export type Mutation = {
  __typename?: "Mutation";
  createRace: Race;
  createResult: Result;
  deleteRace: Scalars["Boolean"]["output"];
  deleteResult: Scalars["Boolean"]["output"];
  updateRace: Race;
  updateResult: Result;
};

export type MutationCreateRaceArgs = {
  input: CreateRaceInput;
};

export type MutationCreateResultArgs = {
  input: CreateResultInput;
};

export type MutationDeleteRaceArgs = {
  id: Scalars["Int"]["input"];
};

export type MutationDeleteResultArgs = {
  id: Scalars["Int"]["input"];
};

export type MutationUpdateRaceArgs = {
  id: Scalars["Int"]["input"];
  input: UpdateRaceInput;
};

export type MutationUpdateResultArgs = {
  id: Scalars["Int"]["input"];
  input: UpdateResultInput;
};

export type Query = {
  __typename?: "Query";
  race: Maybe<Race>;
  races: Array<Race>;
  racesByYear: Array<Race>;
  result: Maybe<Result>;
  resultByRaceId: Array<Result>;
  results: Array<Result>;
};

export type QueryRaceArgs = {
  id: Scalars["Int"]["input"];
};

export type QueryRacesByYearArgs = {
  year: Scalars["String"]["input"];
};

export type QueryResultArgs = {
  id: Scalars["Int"]["input"];
};

export type QueryResultByRaceIdArgs = {
  id: Scalars["Int"]["input"];
};

export type Race = {
  __typename?: "Race";
  date: Scalars["String"]["output"];
  id: Scalars["Int"]["output"];
  location: Scalars["String"]["output"];
  name: Scalars["String"]["output"];
  results: Maybe<Array<Maybe<Result>>>;
};

export type Result = {
  __typename?: "Result";
  id: Scalars["Int"]["output"];
  participant: Scalars["String"]["output"];
  race: Race;
  time: Scalars["Int"]["output"];
};

export type UpdateRaceInput = {
  date?: InputMaybe<Scalars["String"]["input"]>;
  location?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateResultInput = {
  participant?: InputMaybe<Scalars["String"]["input"]>;
  time?: InputMaybe<Scalars["Int"]["input"]>;
};

export type RaceFieldsFragment = {
  __typename?: "Race";
  id: number;
  name: string;
  date: string;
  location: string;
};

export type ResultFieldsFragment = {
  __typename?: "Result";
  id: number;
  participant: string;
  time: number;
};

export type CreateRaceMutationVariables = Exact<{
  input: CreateRaceInput;
}>;

export type CreateRaceMutation = {
  __typename?: "Mutation";
  createRace: {
    __typename?: "Race";
    id: number;
    name: string;
    date: string;
    location: string;
  };
};

export type CreateResultMutationVariables = Exact<{
  input: CreateResultInput;
}>;

export type CreateResultMutation = {
  __typename?: "Mutation";
  createResult: {
    __typename?: "Result";
    id: number;
    participant: string;
    time: number;
  };
};

export type DeleteRaceMutationVariables = Exact<{
  id: Scalars["Int"]["input"];
}>;

export type DeleteRaceMutation = {
  __typename?: "Mutation";
  deleteRace: boolean;
};

export type DeleteResultMutationVariables = Exact<{
  id: Scalars["Int"]["input"];
}>;

export type DeleteResultMutation = {
  __typename?: "Mutation";
  deleteResult: boolean;
};

export type UpdateRaceMutationVariables = Exact<{
  id: Scalars["Int"]["input"];
  input: UpdateRaceInput;
}>;

export type UpdateRaceMutation = {
  __typename?: "Mutation";
  updateRace: {
    __typename?: "Race";
    id: number;
    name: string;
    date: string;
    location: string;
  };
};

export type UpdateResultMutationVariables = Exact<{
  id: Scalars["Int"]["input"];
  input: UpdateResultInput;
}>;

export type UpdateResultMutation = {
  __typename?: "Mutation";
  updateResult: {
    __typename?: "Result";
    id: number;
    participant: string;
    time: number;
  };
};

export type GetRaceWithResultsQueryVariables = Exact<{
  raceId: Scalars["Int"]["input"];
}>;

export type GetRaceWithResultsQuery = {
  __typename?: "Query";
  race: {
    __typename?: "Race";
    id: number;
    name: string;
    date: string;
    location: string;
    results: Array<{
      __typename?: "Result";
      id: number;
      participant: string;
      time: number;
    }>;
  };
};

export type GetRacesQueryVariables = Exact<{ [key: string]: never }>;

export type GetRacesQuery = {
  __typename?: "Query";
  races: Array<{
    __typename?: "Race";
    id: number;
    name: string;
    date: string;
    location: string;
  }>;
};

export type GetByYearQueryVariables = Exact<{
  year: Scalars["String"]["input"];
}>;

export type GetByYearQuery = {
  __typename?: "Query";
  racesByYear: Array<{
    __typename?: "Race";
    id: number;
    name: string;
    date: string;
    location: string;
  }>;
};

export type GetResultQueryVariables = Exact<{
  resultId: Scalars["Int"]["input"];
}>;

export type GetResultQuery = {
  __typename?: "Query";
  result: {
    __typename?: "Result";
    id: number;
    participant: string;
    time: number;
  };
};

export type GetResultsQueryVariables = Exact<{ [key: string]: never }>;

export type GetResultsQuery = {
  __typename?: "Query";
  results: Array<{
    __typename?: "Result";
    id: number;
    participant: string;
    time: number;
  }>;
};

export const RaceFieldsFragmentDoc = gql`
  fragment raceFields on Race {
    id
    name
    date
    location
  }
`;
export const ResultFieldsFragmentDoc = gql`
  fragment resultFields on Result {
    id
    participant
    time
  }
`;
export const CreateRaceDocument = gql`
  mutation CreateRace($input: CreateRaceInput!) {
    createRace(input: $input) {
      ...raceFields
    }
  }
  ${RaceFieldsFragmentDoc}
`;
export type CreateRaceMutationFn = Apollo.MutationFunction<
  CreateRaceMutation,
  CreateRaceMutationVariables
>;
export function useCreateRaceMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateRaceMutation,
    CreateRaceMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreateRaceMutation, CreateRaceMutationVariables>(
    CreateRaceDocument,
    options,
  );
}
export type CreateRaceMutationHookResult = ReturnType<
  typeof useCreateRaceMutation
>;
export type CreateRaceMutationResult =
  Apollo.MutationResult<CreateRaceMutation>;
export type CreateRaceMutationOptions = Apollo.BaseMutationOptions<
  CreateRaceMutation,
  CreateRaceMutationVariables
>;
export const CreateResultDocument = gql`
  mutation CreateResult($input: CreateResultInput!) {
    createResult(input: $input) {
      ...resultFields
    }
  }
  ${ResultFieldsFragmentDoc}
`;
export type CreateResultMutationFn = Apollo.MutationFunction<
  CreateResultMutation,
  CreateResultMutationVariables
>;
export function useCreateResultMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateResultMutation,
    CreateResultMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateResultMutation,
    CreateResultMutationVariables
  >(CreateResultDocument, options);
}
export type CreateResultMutationHookResult = ReturnType<
  typeof useCreateResultMutation
>;
export type CreateResultMutationResult =
  Apollo.MutationResult<CreateResultMutation>;
export type CreateResultMutationOptions = Apollo.BaseMutationOptions<
  CreateResultMutation,
  CreateResultMutationVariables
>;
export const DeleteRaceDocument = gql`
  mutation DeleteRace($id: Int!) {
    deleteRace(id: $id)
  }
`;
export type DeleteRaceMutationFn = Apollo.MutationFunction<
  DeleteRaceMutation,
  DeleteRaceMutationVariables
>;
export function useDeleteRaceMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteRaceMutation,
    DeleteRaceMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<DeleteRaceMutation, DeleteRaceMutationVariables>(
    DeleteRaceDocument,
    options,
  );
}
export type DeleteRaceMutationHookResult = ReturnType<
  typeof useDeleteRaceMutation
>;
export type DeleteRaceMutationResult =
  Apollo.MutationResult<DeleteRaceMutation>;
export type DeleteRaceMutationOptions = Apollo.BaseMutationOptions<
  DeleteRaceMutation,
  DeleteRaceMutationVariables
>;
export const DeleteResultDocument = gql`
  mutation DeleteResult($id: Int!) {
    deleteResult(id: $id)
  }
`;
export type DeleteResultMutationFn = Apollo.MutationFunction<
  DeleteResultMutation,
  DeleteResultMutationVariables
>;
export function useDeleteResultMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteResultMutation,
    DeleteResultMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteResultMutation,
    DeleteResultMutationVariables
  >(DeleteResultDocument, options);
}
export type DeleteResultMutationHookResult = ReturnType<
  typeof useDeleteResultMutation
>;
export type DeleteResultMutationResult =
  Apollo.MutationResult<DeleteResultMutation>;
export type DeleteResultMutationOptions = Apollo.BaseMutationOptions<
  DeleteResultMutation,
  DeleteResultMutationVariables
>;
export const UpdateRaceDocument = gql`
  mutation UpdateRace($id: Int!, $input: UpdateRaceInput!) {
    updateRace(id: $id, input: $input) {
      ...raceFields
    }
  }
  ${RaceFieldsFragmentDoc}
`;
export type UpdateRaceMutationFn = Apollo.MutationFunction<
  UpdateRaceMutation,
  UpdateRaceMutationVariables
>;
export function useUpdateRaceMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateRaceMutation,
    UpdateRaceMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<UpdateRaceMutation, UpdateRaceMutationVariables>(
    UpdateRaceDocument,
    options,
  );
}
export type UpdateRaceMutationHookResult = ReturnType<
  typeof useUpdateRaceMutation
>;
export type UpdateRaceMutationResult =
  Apollo.MutationResult<UpdateRaceMutation>;
export type UpdateRaceMutationOptions = Apollo.BaseMutationOptions<
  UpdateRaceMutation,
  UpdateRaceMutationVariables
>;
export const UpdateResultDocument = gql`
  mutation UpdateResult($id: Int!, $input: UpdateResultInput!) {
    updateResult(id: $id, input: $input) {
      ...resultFields
    }
  }
  ${ResultFieldsFragmentDoc}
`;
export type UpdateResultMutationFn = Apollo.MutationFunction<
  UpdateResultMutation,
  UpdateResultMutationVariables
>;
export function useUpdateResultMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateResultMutation,
    UpdateResultMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateResultMutation,
    UpdateResultMutationVariables
  >(UpdateResultDocument, options);
}
export type UpdateResultMutationHookResult = ReturnType<
  typeof useUpdateResultMutation
>;
export type UpdateResultMutationResult =
  Apollo.MutationResult<UpdateResultMutation>;
export type UpdateResultMutationOptions = Apollo.BaseMutationOptions<
  UpdateResultMutation,
  UpdateResultMutationVariables
>;
export const GetRaceWithResultsDocument = gql`
  query GetRaceWithResults($raceId: Int!) {
    race(id: $raceId) {
      ...raceFields
      results {
        ...resultFields
      }
    }
  }
  ${RaceFieldsFragmentDoc}
  ${ResultFieldsFragmentDoc}
`;
export function useGetRaceWithResultsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRaceWithResultsQuery,
    GetRaceWithResultsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRaceWithResultsQuery,
    GetRaceWithResultsQueryVariables
  >(GetRaceWithResultsDocument, options);
}
export function useGetRaceWithResultsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRaceWithResultsQuery,
    GetRaceWithResultsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRaceWithResultsQuery,
    GetRaceWithResultsQueryVariables
  >(GetRaceWithResultsDocument, options);
}
export type GetRaceWithResultsQueryHookResult = ReturnType<
  typeof useGetRaceWithResultsQuery
>;
export type GetRaceWithResultsLazyQueryHookResult = ReturnType<
  typeof useGetRaceWithResultsLazyQuery
>;
export type GetRaceWithResultsQueryResult = Apollo.QueryResult<
  GetRaceWithResultsQuery,
  GetRaceWithResultsQueryVariables
>;
export const GetRacesDocument = gql`
  query GetRaces {
    races {
      ...raceFields
    }
  }
  ${RaceFieldsFragmentDoc}
`;
export function useGetRacesQuery(
  baseOptions?: Apollo.QueryHookOptions<GetRacesQuery, GetRacesQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetRacesQuery, GetRacesQueryVariables>(
    GetRacesDocument,
    options,
  );
}
export function useGetRacesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRacesQuery,
    GetRacesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetRacesQuery, GetRacesQueryVariables>(
    GetRacesDocument,
    options,
  );
}
export type GetRacesQueryHookResult = ReturnType<typeof useGetRacesQuery>;
export type GetRacesLazyQueryHookResult = ReturnType<
  typeof useGetRacesLazyQuery
>;
export type GetRacesQueryResult = Apollo.QueryResult<
  GetRacesQuery,
  GetRacesQueryVariables
>;
export const GetByYearDocument = gql`
  query GetByYear($year: String!) {
    racesByYear(year: $year) {
      ...raceFields
    }
  }
  ${RaceFieldsFragmentDoc}
`;
export function useGetByYearQuery(
  baseOptions: Apollo.QueryHookOptions<GetByYearQuery, GetByYearQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetByYearQuery, GetByYearQueryVariables>(
    GetByYearDocument,
    options,
  );
}
export function useGetByYearLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetByYearQuery,
    GetByYearQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetByYearQuery, GetByYearQueryVariables>(
    GetByYearDocument,
    options,
  );
}
export type GetByYearQueryHookResult = ReturnType<typeof useGetByYearQuery>;
export type GetByYearLazyQueryHookResult = ReturnType<
  typeof useGetByYearLazyQuery
>;
export type GetByYearQueryResult = Apollo.QueryResult<
  GetByYearQuery,
  GetByYearQueryVariables
>;
export const GetResultDocument = gql`
  query GetResult($resultId: Int!) {
    result(id: $resultId) {
      ...resultFields
    }
  }
  ${ResultFieldsFragmentDoc}
`;
export function useGetResultQuery(
  baseOptions: Apollo.QueryHookOptions<GetResultQuery, GetResultQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetResultQuery, GetResultQueryVariables>(
    GetResultDocument,
    options,
  );
}
export function useGetResultLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetResultQuery,
    GetResultQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetResultQuery, GetResultQueryVariables>(
    GetResultDocument,
    options,
  );
}
export type GetResultQueryHookResult = ReturnType<typeof useGetResultQuery>;
export type GetResultLazyQueryHookResult = ReturnType<
  typeof useGetResultLazyQuery
>;
export type GetResultQueryResult = Apollo.QueryResult<
  GetResultQuery,
  GetResultQueryVariables
>;
export const GetResultsDocument = gql`
  query GetResults {
    results {
      ...resultFields
    }
  }
  ${ResultFieldsFragmentDoc}
`;
export function useGetResultsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetResultsQuery,
    GetResultsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetResultsQuery, GetResultsQueryVariables>(
    GetResultsDocument,
    options,
  );
}
export function useGetResultsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetResultsQuery,
    GetResultsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetResultsQuery, GetResultsQueryVariables>(
    GetResultsDocument,
    options,
  );
}
export type GetResultsQueryHookResult = ReturnType<typeof useGetResultsQuery>;
export type GetResultsLazyQueryHookResult = ReturnType<
  typeof useGetResultsLazyQuery
>;
export type GetResultsQueryResult = Apollo.QueryResult<
  GetResultsQuery,
  GetResultsQueryVariables
>;
