/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * pnpm generate-gql
 *
 * for this file to be re-created
 */
import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
export type Maybe<T> = T;
export type InputMaybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never;
    };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
};

export type Mutation = {
  __typename?: "Mutation";
  addResult: Result;
  createRace: Race;
};

export type MutationAddResultArgs = {
  participant: Scalars["String"]["input"];
  raceId: Scalars["Int"]["input"];
  time: Scalars["Int"]["input"];
};

export type MutationCreateRaceArgs = {
  date: Scalars["String"]["input"];
  location: Scalars["String"]["input"];
  name: Scalars["String"]["input"];
};

export type Query = {
  __typename?: "Query";
  race: Maybe<Race>;
  races: Array<Race>;
};

export type QueryRaceArgs = {
  id: Scalars["Int"]["input"];
};

export type Race = {
  __typename?: "Race";
  date: Scalars["String"]["output"];
  id: Scalars["Int"]["output"];
  location: Scalars["String"]["output"];
  name: Scalars["String"]["output"];
  results: Maybe<Array<Maybe<Result>>>;
};

export type Result = {
  __typename?: "Result";
  id: Scalars["Int"]["output"];
  participant: Scalars["String"]["output"];
  race: Race;
  time: Scalars["Int"]["output"];
};

export type RaceFieldsFragment = {
  __typename?: "Race";
  id: number;
  name: string;
  date: string;
  location: string;
};

export type ResultFieldsFragment = {
  __typename?: "Result";
  id: number;
  participant: string;
  time: number;
};

export type CreateRaceMutationVariables = Exact<{
  name: Scalars["String"]["input"];
  date: Scalars["String"]["input"];
  location: Scalars["String"]["input"];
}>;

export type CreateRaceMutation = {
  __typename?: "Mutation";
  createRace: {
    __typename?: "Race";
    id: number;
    name: string;
    date: string;
    location: string;
  };
};

export type AddResultMutationVariables = Exact<{
  raceId: Scalars["Int"]["input"];
  participant: Scalars["String"]["input"];
  time: Scalars["Int"]["input"];
}>;

export type AddResultMutation = {
  __typename?: "Mutation";
  addResult: {
    __typename?: "Result";
    id: number;
    participant: string;
    time: number;
  };
};

export type GetRaceWithResultsQueryVariables = Exact<{
  raceId: Scalars["Int"]["input"];
}>;

export type GetRaceWithResultsQuery = {
  __typename?: "Query";
  race: {
    __typename?: "Race";
    id: number;
    name: string;
    date: string;
    location: string;
    results: Array<{
      __typename?: "Result";
      id: number;
      participant: string;
      time: number;
    }>;
  };
};

export type GetRacesQueryVariables = Exact<{ [key: string]: never }>;

export type GetRacesQuery = {
  __typename?: "Query";
  races: Array<{
    __typename?: "Race";
    id: number;
    name: string;
    date: string;
    location: string;
  }>;
};

export const RaceFieldsFragmentDoc = gql`
  fragment raceFields on Race {
    id
    name
    date
    location
  }
`;
export const ResultFieldsFragmentDoc = gql`
  fragment resultFields on Result {
    id
    participant
    time
  }
`;
export const CreateRaceDocument = gql`
  mutation CreateRace($name: String!, $date: String!, $location: String!) {
    createRace(name: $name, date: $date, location: $location) {
      ...raceFields
    }
  }
  ${RaceFieldsFragmentDoc}
`;
export type CreateRaceMutationFn = Apollo.MutationFunction<
  CreateRaceMutation,
  CreateRaceMutationVariables
>;
export function useCreateRaceMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateRaceMutation,
    CreateRaceMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreateRaceMutation, CreateRaceMutationVariables>(
    CreateRaceDocument,
    options,
  );
}
export type CreateRaceMutationHookResult = ReturnType<
  typeof useCreateRaceMutation
>;
export type CreateRaceMutationResult =
  Apollo.MutationResult<CreateRaceMutation>;
export type CreateRaceMutationOptions = Apollo.BaseMutationOptions<
  CreateRaceMutation,
  CreateRaceMutationVariables
>;
export const AddResultDocument = gql`
  mutation AddResult($raceId: Int!, $participant: String!, $time: Int!) {
    addResult(raceId: $raceId, participant: $participant, time: $time) {
      ...resultFields
    }
  }
  ${ResultFieldsFragmentDoc}
`;
export type AddResultMutationFn = Apollo.MutationFunction<
  AddResultMutation,
  AddResultMutationVariables
>;
export function useAddResultMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddResultMutation,
    AddResultMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<AddResultMutation, AddResultMutationVariables>(
    AddResultDocument,
    options,
  );
}
export type AddResultMutationHookResult = ReturnType<
  typeof useAddResultMutation
>;
export type AddResultMutationResult = Apollo.MutationResult<AddResultMutation>;
export type AddResultMutationOptions = Apollo.BaseMutationOptions<
  AddResultMutation,
  AddResultMutationVariables
>;
export const GetRaceWithResultsDocument = gql`
  query GetRaceWithResults($raceId: Int!) {
    race(id: $raceId) {
      ...raceFields
      results {
        ...resultFields
      }
    }
  }
  ${RaceFieldsFragmentDoc}
  ${ResultFieldsFragmentDoc}
`;
export function useGetRaceWithResultsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRaceWithResultsQuery,
    GetRaceWithResultsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRaceWithResultsQuery,
    GetRaceWithResultsQueryVariables
  >(GetRaceWithResultsDocument, options);
}
export function useGetRaceWithResultsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRaceWithResultsQuery,
    GetRaceWithResultsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRaceWithResultsQuery,
    GetRaceWithResultsQueryVariables
  >(GetRaceWithResultsDocument, options);
}
export type GetRaceWithResultsQueryHookResult = ReturnType<
  typeof useGetRaceWithResultsQuery
>;
export type GetRaceWithResultsLazyQueryHookResult = ReturnType<
  typeof useGetRaceWithResultsLazyQuery
>;
export type GetRaceWithResultsQueryResult = Apollo.QueryResult<
  GetRaceWithResultsQuery,
  GetRaceWithResultsQueryVariables
>;
export const GetRacesDocument = gql`
  query GetRaces {
    races {
      ...raceFields
    }
  }
  ${RaceFieldsFragmentDoc}
`;
export function useGetRacesQuery(
  baseOptions?: Apollo.QueryHookOptions<GetRacesQuery, GetRacesQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetRacesQuery, GetRacesQueryVariables>(
    GetRacesDocument,
    options,
  );
}
export function useGetRacesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRacesQuery,
    GetRacesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetRacesQuery, GetRacesQueryVariables>(
    GetRacesDocument,
    options,
  );
}
export type GetRacesQueryHookResult = ReturnType<typeof useGetRacesQuery>;
export type GetRacesLazyQueryHookResult = ReturnType<
  typeof useGetRacesLazyQuery
>;
export type GetRacesQueryResult = Apollo.QueryResult<
  GetRacesQuery,
  GetRacesQueryVariables
>;
